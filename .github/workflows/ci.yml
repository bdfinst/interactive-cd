name: CI Flow

on:
  push:
    branches: [main]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.claude/**'
      - 'LICENSE'
      - '.gitignore'
  pull_request:
    branches: [main]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.claude/**'
      - 'LICENSE'
      - '.gitignore'

jobs:
  # Check if we should skip CI (for release-please merges)
  should-run:
    name: Check if CI should run
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.check.outputs.should_run }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check if release-please commit
        id: check
        run: |
          # Check commit message for release-please pattern
          COMMIT_MSG=$(git log -1 --pretty=%B)
          COMMIT_AUTHOR=$(git log -1 --pretty=%an)

          if echo "$COMMIT_MSG" | grep -q "^chore(main): release"; then
            echo "Release-please commit detected, skipping CI"
            echo "should_run=false" >> $GITHUB_OUTPUT
          elif [ "$COMMIT_AUTHOR" = "github-actions[bot]" ] && echo "$COMMIT_MSG" | grep -q "release"; then
            echo "Release commit detected, skipping CI"
            echo "should_run=false" >> $GITHUB_OUTPUT
          else
            echo "Normal commit, running CI"
            echo "should_run=true" >> $GITHUB_OUTPUT
          fi

  # Single setup job that prepares dependencies for all other jobs
  setup:
    name: Setup Dependencies
    runs-on: ubuntu-latest
    needs: should-run
    if: needs.should-run.outputs.should_run == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Cache node_modules
        uses: actions/cache/save@v3
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}

  lint:
    name: Lint
    runs-on: ubuntu-latest
    needs: setup

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'

      - name: Restore node_modules cache
        uses: actions/cache/restore@v3
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}

      - name: Run linter
        run: npm run lint

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: setup

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'

      - name: Restore node_modules cache
        uses: actions/cache/restore@v3
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}

      - name: Run unit tests
        run: npm test

  # e2e-tests:
  #   name: E2E Tests
  #   runs-on: ubuntu-latest
  #   needs: setup

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '24'

  #     - name: Restore node_modules cache
  #       uses: actions/cache/restore@v3
  #       with:
  #         path: |
  #           node_modules
  #           ~/.npm
  #         key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}

  #     - name: Get Playwright version
  #       id: playwright-version
  #       run: echo "version=$(node -p "require('./package-lock.json').packages['node_modules/@playwright/test'].version")" >> $GITHUB_OUTPUT

  #     - name: Cache Playwright browsers
  #       id: playwright-cache
  #       uses: actions/cache@v3
  #       with:
  #         path: ~/.cache/ms-playwright
  #         key: ${{ runner.os }}-playwright-${{ steps.playwright-version.outputs.version }}

  #     - name: Install Playwright browsers
  #       run: npx playwright install --with-deps

  #     - name: Run E2E tests
  #       run: npm run test:e2e

  #     - name: Upload Playwright report on failure
  #       if: failure()
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: playwright-report
  #         path: playwright-report/
  #         retention-days: 7

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: setup # Only depends on setup, not on tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'

      - name: Restore node_modules cache
        uses: actions/cache/restore@v3
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: build/
          retention-days: 7

  # Quality gate that ensures all checks pass before marking CI as successful
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [should-run, lint, unit-tests, e2e-tests, build]
    if: always() && needs.should-run.outputs.should_run == 'true'

    steps:
      - name: Check all jobs succeeded
        run: |
          if [ "${{ needs.lint.result }}" != "success" ] || \
             [ "${{ needs.unit-tests.result }}" != "success" ] || \
             [ "${{ needs.e2e-tests.result }}" != "success" ] || \
             [ "${{ needs.build.result }}" != "success" ]; then
            echo "One or more required jobs failed"
            exit 1
          fi
          echo "All quality checks passed!"
