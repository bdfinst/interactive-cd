name: Release Please

on:
  workflow_dispatch:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write

jobs:
  # Check if CI passed before running release-please
  check-ci:
    name: Check CI Status
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.check.outputs.should_run }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check if should run release-please
        id: check
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)

          # Skip if this is already a release commit (prevent loops)
          if echo "$COMMIT_MSG" | grep -q "^chore(main): release"; then
            echo "Release commit detected, skipping release-please"
            echo "should_run=false" >> $GITHUB_OUTPUT
          else
            echo "Normal commit, checking CI status"
            echo "should_run=true" >> $GITHUB_OUTPUT
          fi

  release-please:
    runs-on: ubuntu-latest
    needs: check-ci
    if: needs.check-ci.outputs.should_run == 'true'
    steps:
      - uses: googleapis/release-please-action@v4
        id: release
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      # Checkout repository when a release is created (PR merged)
      - name: Checkout
        if: ${{ steps.release.outputs.release_created }}
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      # Update release branch when Release PR is merged
      - name: Update release branch
        if: ${{ steps.release.outputs.release_created }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Delete remote release branch if it exists
          git push origin --delete release || echo "No existing release branch to delete"

          # Create and push new release branch from current main
          git checkout -b release
          git push origin release

          echo "Release branch updated to $(git rev-parse HEAD)"

      - name: Output release info
        if: ${{ steps.release.outputs.release_created }}
        run: |
          echo "Release created: ${{ steps.release.outputs.tag_name }}"
          echo "Release branch updated for Netlify deployment"
